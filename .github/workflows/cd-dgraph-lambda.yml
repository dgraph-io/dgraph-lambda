name: cd-dgraph-lambda
on: workflow_dispatch
jobs:
  dgraph-lambda-build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set dgraph-lambda Release Version
        run: |
          #!/bin/bash
          GIT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$GIT_BRANCH_NAME" == "release/v"* ]]; 
          then
            echo "this is a release branch"
          else
            echo "this is NOT a release branch"
            exit 1
          fi
          DGRAPH_LAMBDA_RELEASE_VERSION=$(git rev-parse --abbrev-ref HEAD | sed  's/release\///')
          echo "making a new release for dgraph "$DGRAPH_LAMBDA_RELEASE_VERSION
          echo "DGRAPH_LAMBDA_RELEASE_VERSION=$DGRAPH_LAMBDA_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_TOKEN }}
      - name: Install linux dependencies
        run: |
          #!/bin/bash
          sudo apt-get update -y
          # buildx requires these base linux packages to run npm install
          sudo apt-get install qemu qemu-user-static binfmt-support debootstrap -y        
      - name: Build and push dgraph-lambda image manifest
        run: |
          docker manifest create dgraph-lambda:${{ env.DGRAPH_LAMBDA_RELEASE_VERSION }} --amend dgraph-lambda:${{ env.DGRAPH_LAMBDA_RELEASE_VERSION }}-amd64 --amend dgraph-lambda:${{ env.DGRAPH_LAMBDA_RELEASE_VERSION }}-arm64
          docker manifest push dgraph-lambda:${{ env.DGRAPH_LAMBDA_RELEASE_VERSION }}
          [[ "${{ inputs.latest }}" = true ]] && docker manifest create dgraph-lambda:latest --amend dgraph-lambda:${{ env.DGRAPH_LAMBDA_RELEASE_VERSION }}-amd64 --amend dgraph-lambda:${{ env.DGRAPH_LAMBDA_RELEASE_VERSION }}-arm64
          [[ "${{ inputs.latest }}" = true ]] && docker manifest push dgraph-lambda:latest || true
